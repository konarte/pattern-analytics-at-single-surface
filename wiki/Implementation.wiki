#summary 2. Архитектура решения

<wiki:toc max_depth="2" />

=== Введение ===
Предлагается выбрать средством решения язык Java 1.5, с использованием стандартного способа подключения к базам данных (JDBC). Java 1.5. Данное решение позволит использовать программу как в среде Windows, так и в среде Linux (и любой другой, которая позволит запустить виртуальную машину Java 1.5 и выше).

В качестве БД можно будет использовать любую СУБД. Мы будем использовать СУБД MySQL версии 5.x ([http://www.mysql.ru/download/ 5.1.28]). Данное решение позволит использовать единое хранилище данных для множества операторов данной системы. Нам нельзя забыть также о разграничении прав пользователей на просмотр и изменение данных. Предлагается реализовать классическую схему с защитой ролями необходимых элементов интерфейса и данных.

Предварительные фильтры изображения должны настраиваться в виде подключаемых модулей обработки – пользователь должен сам указать, в каком порядке и с какими параметрами эти фильтры будут применяться.

Как вы помните, нам необходимо иметь 5 видов данных – датчики, дефекты, материалы, поверхности и графики дефектов на определенных датчиках. В случае отсутствия дефекта будет фиксироваться сигнал от бездефектной поверхности.

== 2.1 Подсистема безопасности ==
Задача подсистемы безопасности – разграничить пользователей по виду выполняемых действий. Т.к. у нас достаточно простое приложение, то предлагается ввести жестко заданные классы + жестко заданные роли.
	В системе вводится три типа пользователей:
  * Администраторы системы (они могут добавлять модули, фильтры, датчики, дефекты, поверхности, управлять безопасностью, заносить новых пользователей и т.д., и т.п.)
  * Пользователи системы (они добавляют и изменяют годографы). В текущей реализации персонализация данных не требуется. В дальнейшем она должна быть решена на уровне БД (вместо копания с view-представлениями, хранимыми процедурами и т.д. предлагается просто нормально проработать слой обращения к базам данных, т.е. закодировать новое поведение схем безопасности должно быть элементарно). 
  * Гости системы. Они работают в режиме только просмотра.

Предлагается хранить каждого пользователя системы на уровне базы данных. Т.е. логины и пароли хранить не в приложении, а в БД.

@todo: Описать таблицы…


== Sensors ==


== 2.3 Поверхности ==
*Каталог типов (форм) поверхностей, SURFACE_TYPES*
||*Название*||*Описание*||*Тип данных*||
||ID_SURFACE_TYPE||Первичный ключ||NUMBER(10)||
||NAME||Название типа поверхности||VARCHAR(255)||
||SURFACE_IMAGE||Изображение поверхности в виде картинки. Картинка должна быть стандартизованного размера. Картинка имеет изображение 256x256.||BLOB||

*Каталог конфигураций поверхностей, SURFACE_MODES*
||*Название*||*Описание*||*Тип данных*||
||ID_SURFACE_MODE||Первичный ключ||NUMBER(10)||
||NAME||Название типа поверхности||VARCHAR(255)||
||SURFACE_TYPE||Внешний ключ на таблицу SURFCE_TYPES||NUMBER(10)||

*Материалы поверхностей, SURFACE_MATERIALS*
||*Название*||*Описание*||*Тип данных*||
||ID_SURFACE_MATERIAL||Первичный ключ||NUMBER(10)||
||NAME||Название материала||VARCHAR(255)||
||ELECTRICAL_CONDUCTION||Электрическая проводимость от 200 и выше до 2000 в сименсах (1/Ом)||NUMBER(14,4)||
||MAGNETIC_CONDUCTIVITY||[AdditionalExplanation Магнитная проницаемость], будем считать что без названия||NUMBER(14,4)||

_Далее я бы захерачил все физ-хим свойства, включая атомную структуру в картинках, но это для будущего анализатора материи, пока ограничимся «электрикой»_

_Надо не забыть, чтобы последняя введенная цифра запоминалась, когда много вводишь всего._

*Q: Тут я запамятовал что к чему (может просто писать труба ХГк10 или плита Сталь45-01).*

== 2.4 Дефекты ==
== 2.5 Годографы ==
== 2.6 Дефекты ==